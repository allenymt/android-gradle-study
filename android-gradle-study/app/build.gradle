println("App build.gradle: " + project)
project.beforeEvaluate { // 这里肯定是无效的，本project都开始了，监听配置执行没有意义
    println '项目开始构建1'
}


// 根项目-获得所有的project,包括自身，第一个就是rootProject
rootProject.getAllprojects().eachWithIndex { Project project, int index ->
    println("rootProject getAllprojects index $index : $project.name")
}

// 获得所有的project,包括自身，第一个就是rootProject
project.getAllprojects().eachWithIndex { Project project, int index ->
    println("currentProject getAllprojects index $index : $project.name")
}

rootProject.getSubprojects().eachWithIndex { Project project, int index ->
    println("rootProject getSubprojects index $index : $project.name")
}

project.getSubprojects().eachWithIndex { Project project, int index ->
    println("currentProject getSubprojects index $index : $project.name")
}

println("getRootProject ${project.getRootProject()}")


println("getParent ${project.getParent()}")

project.afterEvaluate {
    println '项目构建结束1'
}
ext {
    ext_pro = 'hello'
}

apply plugin: 'com.android.application'
//buildscript {
//    apply plugin: 'classpath-plugin'
//}
apply plugin: 'ags-groovy-plugin'
apply plugin: 'ags-java-plugin'
apply plugin: 'ags-test-plugin'
apply plugin: 'dependency-plugin'
apply plugin: 'property-read-plugin'
//apply plugin: 'com.jakewharton.butterknife'
apply from: rootProject.file('tools.gradle')
apply from: rootProject.file("build_config/build_config.gradle")
demoConfig {
    enable = true
    message = 'hello world'
    strings = ['a', 'b']
}

def buildTimes() {
    return new Date().format("yyyyMMdd")
}


android {
    compileSdkVersion 30
    defaultConfig {
        applicationId "com.jeremyliao.gradle"
        minSdkVersion 15
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
    }

    flavorDimensions "yulun1","yulun2","yulun3"
    productFlavors {
        A {
            dimension("yulun1")
        }
        B {
            dimension("yulun2")
        }
        C {
            dimension("yulun3")
        }
        D {
            dimension("yulun1")
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        release {
            minifyEnabled true
            shrinkResources true
            zipAlignEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility 1.8
        targetCompatibility 1.8
    }
    android {
        lintOptions {
            abortOnError false
        }
    }


    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            if (output.outputFile == null && !output.outputFile.name.endsWith('.apk')) {
                contiue
            }

            def info = ""

            // 因为维度存在，所以一个 variant 可能由有一个以上的 Flavor 交叉组成，所以这里 Flavor 名也是复数的
            variant.productFlavors.each{
                info = info + it.name + "_"
            }

            println("TAG:${variant.name}/${info}")
            outputFileName = "${info}${variant.buildType.name}_v${variant.versionCode}_${buildTimes()}.apk"
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.0.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
//    implementation 'com.jakewharton:butterknife:9.0.0'
//    annotationProcessor 'com.jakewharton:butterknife-compiler:9.0.0'
    implementation project(path: ':testlibrary')
//    implementation project(path: ':plugin')
}


project.android.applicationVariants.all { variant ->
    System.out.println("[TEST]" + "variant: " + variant)
    def packageTask = project.tasks.findByName("package${variant.name.capitalize()}")
    System.out.println("[TEST]" + "packageTask: " + packageTask)
    packageTask.doFirst {
        def clazz = Class.forName("com.android.builder.model.Version")
        def field = clazz.getDeclaredField("ANDROID_GRADLE_PLUGIN_VERSION")
        field.setAccessible(true)
        version = field.get(null)
        System.out.println("[TEST]" + "22version: " + version)
    }
}


//project.android.applicationVariants.all { variant ->
//    System.out.println("[DEPENDENCY]" + "variant: " + variant.name)
//    project.configurations.each { Configuration configuration ->
//        System.out.println("[DEPENDENCY]" + "configuration: " + configuration)
//        if (configuration.name.toLowerCase().contains("${variant.name}runtimeclasspath")) {
//            configuration.incoming.resolutionResult.root.dependencies.each { DependencyResult dr ->
//                System.out.println("[DEPENDENCY]" + "DependencyResult: " + dr)
//                if (dr instanceof ResolvedDependencyResult) {
//                    def rdr = (ResolvedDependencyResult) dr
//                    rdr.selected.dependencies.each { DependencyResult dependencyResult ->
//                        System.out.println("[DEPENDENCY]" + "DependencyResult: " + dependencyResult)
//                    }
//                }
//            }
//        }
//    }
//}

println("app build.gradle getScriptClassPath: " + project.buildscript.getScriptClassPath())
println("root_project_ext_pro in module: " + root_project_ext_pro)
println("getTimeStamp: " + getTimeStamp())