//  获取构建各个阶段、任务的耗时情况
// 记录初始化阶段开始时间
long beginOfSetting = System.currentTimeMillis()
// 配置阶段耗时
def beginOfConfig
// 标记位
def configHasBegin = false
// 记录每个project耗时
def beginOfProjectConfig = new HashMap()
// 记录执行阶段耗时
def beginOfProjectExcute

// 初始化阶段耗时
gradle.projectsLoaded {
    println 'collect_初始化阶段，耗时：' + (System.currentTimeMillis() -
            beginOfSetting) + 'ms'
}

gradle.beforeProject { project ->
    if (!configHasBegin) {
        // 第一个project开始配置
        configHasBegin = true
        // 记录时间，第一个project开始配置，也就是整体开始配置时间
        beginOfConfig = System.currentTimeMillis()
    }
    // 存储每个项目 开始配置的时间
    beginOfProjectConfig.put(project, System.currentTimeMillis())
}

gradle.afterProject { project ->
    def begin = beginOfProjectConfig.get(project)
    // project为key，输出每个project 配置耗时
    println 'collect_配置阶段，' + project + '耗时：' +
            (System.currentTimeMillis() - begin) + 'ms'
}

gradle.taskGraph.whenReady {
    // 有向无环图生成好代表着配置结束
    println 'collect_配置阶段，总共耗时：' + (System.currentTimeMillis() -
            beginOfConfig) + 'ms'
    beginOfProjectExcute = System.currentTimeMillis()
}
gradle.taskGraph.beforeTask { task ->
    task.doFirst {
        // 每个task开始执行前
        // 使用 ext 给 task 自定义需要的属性
        task.ext.beginOfTask = System.currentTimeMillis()
    }
    task.doLast {
        // 每个task执行结束
        println 'collect_执行阶段，' + task + '耗时：' +
                (System.currentTimeMillis() - task.beginOfTask) + 'ms'
    }
}
gradle.buildFinished {
    // build结束
    println 'collect_执行阶段，耗时：' + (System.currentTimeMillis() -
            beginOfProjectExcute) + 'ms'
}




/********task依赖方式*********/
//静态依赖
task task1 {
    doLast {
        println "This is task1"
    }
}

task task2 {
    doLast {
        println "This is task2"
    }
}

// Task 静态依赖方式1 (常用）
task task3(dependsOn: [task1, task2]) {
    doLast {
        println "This is task3"
    }
}

// Task 静态依赖方式2
task3.dependsOn(task1, task2)


// Task 动态依赖方式
task dytask4 {
    dependsOn this.tasks.findAll { task ->
        return task.name.startsWith("task")
    }
    doLast {
        println "This is task4"
    }
}


// 通过 API 指定依赖顺序
task taskX {
    mustRunAfter "taskY"

    doFirst {
        println "this is taskX"
    }
}
task taskY {
    // 使用 mustRunAfter 指定依赖的（一至多个）前置 task
    // 也可以使用 shouldRunAfter 的方式，但是是非强制的依赖
//    shouldRunAfter taskA
    doFirst {
        println "this is taskY"
    }
}
task taskZ(dependsOn: [taskX, taskY]) {
    mustRunAfter "taskY"
    doFirst {
        println "this is taskZ"
    }
}

/********task依赖方式*********/


// task类型
// 1、删除根目录下的 build 文件
task clean(type: Delete) {
    delete rootProject.buildDir
}
// 2、将 doc 复制到 build/target 目录下
task copyDocs(type: Copy) {
    from 'src/main/doc'
    into 'build/target/doc'
}
// 3、执行时会复制源文件到目标目录，然后从目标目录删除所有非复制文件
task syncFile(type:Sync) {
    from 'src/main/doc'
    into 'build/target/doc'
}


// 利用代码挂载到生命周期
// 在配置阶段执行完之后执行 writeTask
this.project.afterEvaluate { project ->
    // 找到build task
    def buildTask = project.tasks.findByName("build")
    doLast {
        // 挂载一个doLast，调用我们自己的任务
        buildTask.doLast {
            // 5.x 上使用 finalizedBy
            writeTask.execute()
        }
    }
}
